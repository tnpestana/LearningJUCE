/*
  ==============================================================================

    tnpAudioSource.cpp
    Created: 24 Jun 2018 4:31:18pm
    Author:  tnpes

  ==============================================================================
*/

#include "tnpAudioSource.h"

//==============================================================================
// This is an audio source that streams the output of our demo synth.
TnpAudioSource::TnpAudioSource(MidiKeyboardState& keyState) 
	: keyboardState(keyState)
{
	formatManager.registerBasicFormats();
	// Add some voices to our synth, to play the sounds..
	for (auto i = 0; i < 4; ++i)
	{
		synth.addVoice(new SamplerVoice());    // and these ones play the sampled sounds
	}

	// ..and add a sound for them to play...
	setUsingSampledSound();
}

void TnpAudioSource::setUsingSampledSound()
{
	File* file = new File("C:/Users/tnpes/Documents/Code/JUCE/Projects/tnpSampleSynth/tnpSampleSynth/Media/cello.wav");
	std::unique_ptr<AudioFormatReader> audioReader = (std::unique_ptr<AudioFormatReader>) formatManager.createReaderFor(*file);

	BigInteger allNotes;
	allNotes.setRange(0, 128, true);

	synth.clearSounds();
	synth.addSound(new SamplerSound("demo sound",
		*audioReader,
		allNotes,
		74,   // root midi note
		0.1,  // attack time
		0.1,  // release time
		10.0  // maximum sample length
	));
}

void TnpAudioSource::prepareToPlay(int samplesPerBlockExpected, double sampleRate)
{
	midiCollector.reset(sampleRate);

	synth.setCurrentPlaybackSampleRate(sampleRate);
}

void TnpAudioSource::releaseResources()
{
}

void TnpAudioSource::getNextAudioBlock(const AudioSourceChannelInfo& bufferToFill)
{
	// the synth always adds its output to the audio buffer, so we have to clear it
	// first..
	bufferToFill.clearActiveBufferRegion();

	// fill a midi buffer with incoming messages from the midi input.
	MidiBuffer incomingMidi;
	midiCollector.removeNextBlockOfMessages(incomingMidi, bufferToFill.numSamples);

	// pass these messages to the keyboard state so that it can update the component
	// to show on-screen which keys are being pressed on the physical midi keyboard.
	// This call will also add midi messages to the buffer which were generated by
	// the mouse-clicking on the on-screen keyboard.
	keyboardState.processNextMidiBuffer(incomingMidi, 0, bufferToFill.numSamples, true);

	// and now get the synth to process the midi events and generate its output.
	synth.renderNextBlock(*bufferToFill.buffer, incomingMidi, 0, bufferToFill.numSamples);
}
